{"version":3,"sources":["components/input/weightInput.jsx","components/helpers/weightForSleeves.js","components/helpers/availablePoundsPerSleeve.js","components/helpers/removeItemFromArray.js","components/helpers/largestPlate.js","components/helpers/sleevePlates.js","components/weightDisplay/outPutContainer.jsx","components/appContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["WeightInput","react_default","a","createElement","className","name","type","value","this","props","onChange","handleOnChange","React","Component","weightForSleeves","weight","sleevePlates","plates","evenAmountOfPlates","availablePoundsPerSleeve","availablePlates","key","hasOwnProperty","amountAvailable","available","i","push","removeItemFromArray","array","item","index","_","indexOf","splice","largestPlate","total","tempPlates","Array","from","biggestPlate","max","length","weightWithoutBar","workSetWeight","barWeight","OutPutContainer","platesNeeded","_this$props","_this","isNaN","tempWeight","lbs","heaviestPlate","renderPlates","isNull","listItems","map","plate","defaultProps","AppContainer","state","55","45","35","25","10","5","2.5","1.25","1","0.75","0.5","0.25","onWorkSetInputValueChange","e","setState","currentTarget","Fragment","weightInput","outPutContainer","App","appContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.992df502.chunk.js","sourcesContent":["import React from \"react\";\nimport { func, number } from \"prop-types\";\n\nclass WeightInput extends React.Component {\n  static propTypes = {\n    value: number.isRequired,\n    handleOnChange: func.isRequired,\n  };\n\n  render() {\n    return (\n      <form className=\"weight-input-container\">\n        <label className=\"weight-input-label\">\n          <h3>Workset Weight</h3>\n          <input\n            name=\"weight\"\n            className=\"weight-input-value\"\n            type=\"number\"\n            value={this.props.value}\n            onChange={this.props.handleOnChange} />\n        </label>\n      </form>\n    )\n  }\n}\n\nexport default WeightInput;\n","function weightForSleeves(weight) {\n  return weight === 0 ? 0 : weight / 2;\n}\n\nexport default weightForSleeves;\n","function isOdd(number) {\n  return number % 2;\n}\n\nfunction evenAmountOfPlates(plates) {\n  // This ensures that we don't use a plate on one side and then not have a plate for the other side of the barbell\n  if (isOdd(plates)) return plates - 1;\n\n  // TODO: Upgrade plate math to do one side of the barbell, then the next. This would allow us to use odd numbers\n  //  of plates. Example: We could use an extra 10 on the left side, and compensate with 2 5's on the right.\n  //  This seems complicated currently as we would have to know we have the 2 extra 5's to allow this to happen.\n\n  return plates;\n}\n\nfunction sleevePlates(plates) {\n  // divide the plates by 2 since we are calculating the available plates for one side of the barbell\n  return evenAmountOfPlates(plates) / 2;\n}\n\nfunction availablePoundsPerSleeve(availablePlates) {\n  let plates = [];\n\n  for (let key in availablePlates) {\n    if (availablePlates.hasOwnProperty(key)) {\n      let value = availablePlates[key];\n\n      const amountAvailable = sleevePlates(value.available);\n\n      for (let i=0; i < amountAvailable; i++) {\n        plates.push(value.weight)\n      }\n    }\n  }\n  return plates;\n}\n\nexport default availablePoundsPerSleeve;\n","import _ from \"lodash\";\n\nexport function removeItemFromArray(array, item) {\n  const index = _.indexOf(array, item);\n\n  if (index === -1) return array;\n\n  array.splice(index, 1);\n\n  return array;\n}\n","import _ from \"lodash\";\nimport {removeItemFromArray} from \"./removeItemFromArray\";\n\nfunction largestPlate(availablePlates, total) {\n  let tempPlates = Array.from(availablePlates);\n  let biggestPlate = _.max(tempPlates);\n\n  do {\n    biggestPlate = _.max(tempPlates);\n\n    if (biggestPlate <= total) {\n      return biggestPlate;\n    }\n\n    tempPlates = removeItemFromArray(tempPlates, biggestPlate)\n  } while (tempPlates.length > 0);\n\n\n  return biggestPlate <= total ? biggestPlate : 0;\n}\n\nexport default largestPlate;\n","import weightForSleeves from \"./weightForSleeves\";\nimport availablePoundsPerSleeve from \"./availablePoundsPerSleeve\";\nimport largestPlate from \"./largestPlate\";\nimport {removeItemFromArray} from \"./removeItemFromArray\";\n\nconst weightWithoutBar = (workSetWeight, barWeight) => {\n  return workSetWeight - barWeight;\n};\n\nexport function sleevePlates(workSetWeight, plates) {\n  let tempPlates = [];\n  let tempWeight = weightForSleeves(weightWithoutBar(workSetWeight, plates.barWeight));\n  let availablePlates = Array.from(availablePoundsPerSleeve(plates.lbs));\n\n  do {\n    const heaviestPlate = largestPlate(availablePlates, tempWeight);\n\n    if (heaviestPlate > 0) {\n      tempPlates.push(heaviestPlate);\n    }\n\n    removeItemFromArray(availablePlates, heaviestPlate);\n\n    tempWeight = tempWeight - heaviestPlate;\n\n  } while (largestPlate(availablePlates, tempWeight) !== 0);\n\n  return tempPlates\n}\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { number } from \"prop-types\";\nimport { sleevePlates } from \"../helpers/sleevePlates\";\n\nclass OutPutContainer extends React.Component {\n  static propTypes = {\n    workSetWeight: number,\n  };\n\n  static defaultProps = {\n    workSetWeight: 0,\n  };\n\n  render() {\n    const plates =this.platesNeeded();\n    return (\n      <div className=\"output\">\n        <h2>Plates Needed</h2>\n        {this.renderPlates(plates)}\n      </div>\n    )\n  }\n\n  platesNeeded = () => {\n    const { workSetWeight, availablePlates } = this.props;\n    if (_.isNaN(workSetWeight)) return null;\n    if (workSetWeight < availablePlates.barWeight ) return null;\n\n    return sleevePlates(workSetWeight, availablePlates);\n  };\n\n  renderPlates = plates => {\n    if (_.isNull(plates)) return null;\n\n    const listItems = plates.map((plate, index) =>\n      <li key={index}>{plate}</li>\n    );\n\n    return <ul className=\"plates-needed\">{listItems}</ul>\n  };\n}\n\nexport default OutPutContainer;\n","import React from \"react\";\nimport WeightInput from \"./input/weightInput\";\nimport OutPutContainer from \"./weightDisplay/outPutContainer\";\n\nclass AppContainer extends React.Component {\n  state = {\n    workSetWeight: 0,\n    availablePlates: {\n      barWeight: 45,\n      lbs: {\n        55: { weight: 55, available: 0 },\n        45: { weight: 45, available: 8 },\n        35: { weight: 35, available: 0 },\n        25: { weight: 25, available: 4 },\n        10: { weight: 10, available: 4 },\n        5: { weight: 5, available: 4 },\n        2.5: { weight: 2.5, available: 4 },\n        1.25: { weight: 1.25, available: 0 },\n        1: { weight: 1, available: 2 },\n        0.75: { weight: 0.75, available: 2 },\n        0.5: { weight: 0.5, available: 2 },\n        0.25: { weight: 0.25, available: 2 },\n      },\n    },\n  };\n\n  render() {\n    return (\n      <>\n        <header className=\"App-header\">\n          <h1>Barbell Calculator</h1>\n        </header>\n        <WeightInput\n          value={this.state.workSetWeight}\n          handleOnChange={this.onWorkSetInputValueChange}\n        />\n        <OutPutContainer\n          availablePlates={this.state.availablePlates}\n          workSetWeight={this.state.workSetWeight}\n        />\n      </>\n    )\n  }\n\n  onWorkSetInputValueChange = (e) => {\n    this.setState({ workSetWeight: e.currentTarget.value });\n  }\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport './App.css';\nimport AppContainer from \"./components/appContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}